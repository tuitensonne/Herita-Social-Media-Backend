generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               String        @id @default(uuid())
  email            String        @unique @db.VarChar(150)
  password         String        @db.VarChar(150)
  username         String        @db.VarChar(150)
  follower         Int           @default(0)
  following        Int           @default(0)
  number_of_posts  Int           @default(0)
  date_of_birth    DateTime
  gender           Gender
  avatar_url       String?       @db.VarChar(255)
  bio              String?       @db.Text
  messagesReceived Chat[]        @relation("ReceiverUser")
  messagesSent     Chat[]        @relation("UserToChat")
  Comment          Comment[]
  GroupMember      GroupMember[]
  Post             Post[]
}

model Chat {
  id          String     @id @default(uuid())
  content     String
  created_at  DateTime   @default(now())
  type        ChatType
  status      ChatStatus
  sender_id   String
  receiver_id String?
  group_id    String?
  group       Group?     @relation(fields: [group_id], references: [id])
  receiver    User?      @relation("ReceiverUser", fields: [receiver_id], references: [id])
  sender      User       @relation("UserToChat", fields: [sender_id], references: [id])

  @@index([group_id], map: "Chat_group_id_fkey")
  @@index([receiver_id], map: "Chat_receiver_id_fkey")
  @@index([sender_id], map: "Chat_sender_id_fkey")
}

model Group {
  id         String        @id @default(uuid())
  name       String
  created_at DateTime      @default(now())
  chats      Chat[]
  members    GroupMember[]
}

model GroupMember {
  id       String @id @default(uuid())
  user_id  String
  group_id String
  group    Group  @relation(fields: [group_id], references: [id])
  user     User   @relation(fields: [user_id], references: [id])

  @@index([group_id], map: "GroupMember_group_id_fkey")
  @@index([user_id], map: "GroupMember_user_id_fkey")
}

model Post {
  id             String         @id @default(uuid())
  title          String
  content        String         @db.Text
  created_at     DateTime
  post_audience  Post_Audience
  like_counts    Int            @default(0)
  comment_counts Int            @default(0)
  userId         String
  thumbnail_url  String?
  Comment        Comment[]
  Media          Media[]
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  PostLocation   PostLocation[]

  @@index([userId], map: "Post_userId_fkey")
}

model Media {
  id               String           @id @default(uuid())
  image_url        String
  type             MediaType
  postId           String?
  contentSectionId String?
  contentSection   Content_section? @relation("ContentSectionToMedia", fields: [contentSectionId], references: [id])
  post             Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([contentSectionId], map: "Media_contentSectionId_fkey")
  @@index([postId], map: "Media_postId_fkey")
}

model Location {
  id              String            @id @default(uuid())
  latitude        Float
  name            String
  address         String?
  longitude       Float
  Culture_content Culture_content[]
  PostLocation    PostLocation[]
}

model Culture_content {
  id          String            @id @default(uuid())
  created_at  DateTime          @default(now())
  title       String            @db.VarChar(255)
  description String            @db.Text
  category    Culture_category
  location_id String?
  Content     Content_section[]
  Location    Location?         @relation(fields: [location_id], references: [id])

  @@index([category])
  @@index([location_id], map: "Culture_content_location_id_fkey")
}

model Content_section {
  id         String          @id @default(uuid())
  title      String          @db.VarChar(255)
  content    String          @db.Text
  updated_at DateTime
  culture_id String
  Culture    Culture_content @relation(fields: [culture_id], references: [id], onDelete: Cascade)
  Media      Media[]         @relation("ContentSectionToMedia")

  @@index([culture_id], map: "Content_section_culture_id_fkey")
}

model Comment {
  id        String   @id
  content   String
  userId    String
  postId    String
  createdAt DateTime @default(now())
  state     Int?     @default(0)
  Post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId], map: "Comment_postId_fkey")
  @@index([userId], map: "Comment_userId_fkey")
}

model PostLocation {
  postId     String
  locationId String
  Location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  Post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([postId, locationId])
  @@index([locationId], map: "PostLocation_locationId_fkey")
  @@index([postId], map: "PostLocation_postId_fkey")
}

enum Gender {
  Male
  Female
  Other
}

enum Post_Audience {
  Private
  Public
  Friends
}

enum MediaType {
  Video
  Image
}

enum Culture_category {
  HistoricalSite
}

enum ChatType {
  PRIVATE
  GROUP
}

enum ChatStatus {
  SENT
  DELIVERED
  READ
}
