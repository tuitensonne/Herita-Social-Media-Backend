generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                          String        @id @default(uuid())
  email                       String        @unique @db.VarChar(150)
  password                    String        @db.VarChar(150)
  username                    String        @db.VarChar(150)
  follower                    Int           @default(0)
  following                   Int           @default(0)
  number_of_posts             Int           @default(0)
  date_of_birth               DateTime
  gender                      Gender
  avatar_url                  String?       @db.VarChar(255)
  bio                         String?       @db.Text
  Chat_Chat_receiver_idToUser Chat[]        @relation("Chat_receiver_idToUser")
  Chat_Chat_sender_idToUser   Chat[]        @relation("Chat_sender_idToUser")
  Comment                     Comment[]
  GroupMember                 GroupMember[]
  Post                        Post[]
}

model Post {
  id             String        @id @default(uuid())
  title          String
  content        String        @db.Text
  created_at     DateTime
  post_audience  Post_Audience
  like_counts    Int           @default(0)
  comment_counts Int           @default(0)
  thumbnail_url  String?
  locationId     String? // Thêm dòng này
  Comment        Comment[]
  Media          Media[]
  userId         String
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  location Location? @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Post_userId_fkey")
  @@index([locationId], map: "Post_locationId_fkey") // Thêm dòng này để tạo index
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  userId    String
  postId    String
  createdAt DateTime @default(now())
  state     Int?     @default(0)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Comment_userId_fkey")
  @@index([postId], map: "Comment_postId_fkey")
}

model Media {
  id               String           @id @default(uuid())
  image_url        String
  type             MediaType
  postId           String?
  contentSectionId String?
  Content_section  Content_section? @relation(fields: [contentSectionId], references: [id])
  post             Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([contentSectionId], map: "Media_contentSectionId_fkey")
  @@index([postId], map: "Media_postId_fkey")
}

model Location {
  id        String  @id @default(uuid())
  latitude  Float
  name      String
  address   String?
  longitude Float

  posts           Post[]
  culture_content Culture_content? @relation("LocationToCultureContent")
}

model Content_section {
  id              String          @id @default(uuid())
  title           String          @db.VarChar(255)
  content         String          @db.Text
  updated_at      DateTime
  culture_id      String
  Culture_content Culture_content @relation(fields: [culture_id], references: [id], onDelete: Cascade)
  Media           Media[]

  @@index([culture_id], map: "Content_section_culture_id_fkey")
}

model Culture_content {
  id              String                   @id @default(uuid())
  created_at      DateTime                 @default(now())
  title           String                   @db.VarChar(255)
  description     String                   @db.Text
  category        Culture_content_category
  Content_section Content_section[]

  location_id String   @unique
  location    Location @relation("LocationToCultureContent", fields: [location_id], references: [id])

  @@index([category])
  @@index([location_id], map: "Culture_content_location_id_fkey")
}

model Chat {
  id                          String      @id @default(uuid())
  content                     String
  created_at                  DateTime    @default(now())
  type                        Chat_type
  status                      Chat_status
  sender_id                   String
  receiver_id                 String?
  group_id                    String?
  Group                       Group?      @relation(fields: [group_id], references: [id])
  User_Chat_receiver_idToUser User?       @relation("Chat_receiver_idToUser", fields: [receiver_id], references: [id])
  User_Chat_sender_idToUser   User        @relation("Chat_sender_idToUser", fields: [sender_id], references: [id])

  @@index([group_id], map: "Chat_group_id_fkey")
  @@index([receiver_id], map: "Chat_receiver_id_fkey")
  @@index([sender_id], map: "Chat_sender_id_fkey")
}

model Group {
  id          String        @id @default(uuid())
  name        String
  created_at  DateTime      @default(now())
  Chat        Chat[]
  GroupMember GroupMember[]
}

model GroupMember {
  id       String @id @default(uuid())
  user_id  String
  group_id String
  Group    Group  @relation(fields: [group_id], references: [id])
  User     User   @relation(fields: [user_id], references: [id])

  @@index([group_id], map: "GroupMember_group_id_fkey")
  @@index([user_id], map: "GroupMember_user_id_fkey")
}

enum Gender {
  Male
  Female
  Other
}

enum Post_Audience {
  Private
  Public
  Friends
}

enum MediaType {
  Video
  Image
}

enum Culture_content_category {
  HistoricalSite
}

enum Chat_type {
  PRIVATE
  GROUP
}

enum Chat_status {
  SENT
  DELIVERED
  READ
}
